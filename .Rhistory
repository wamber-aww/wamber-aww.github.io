table(alltestQ6[,3] == alltestQ6[,5])
table(alltestQ6$statistic == alltestQ6$statistic.1)
table(alltestQ6[,2] == alltestQ6[,4])
table(alltestQ6[,1] == alltestQ6[,4])
tail(alltestQ6)
library(devtools)
library(Biobase)
library(limma)
library(DESeq2)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
edata = edata[rowMeans(edata) > 100,]
fdata = fData(mp)
names(pdata)
head(pdata)
studyDesign = DESeqDataSetFromMatrix(edata, pdata, ~study)
deQ7 = DESeq(de)
deResult = results(deQ7)
studyDesign = DESeqDataSetFromMatrix(edata, pdata, ~study)
deQ7 = DESeq(studyDesign)
deResult = results(deQ7)
head(deResult)
edataQ7 = log2(as.matrix(edataQ7) + 1)
modQ7 = model.matrix(~ pdata$study)
limQ7 = lmFit(edataQ7, modQ7)
bayesQ7 = eBayes(limQ7)
head(bayesQ7)
edataQ7 = log2(as.matrix(edataQ7) + 1)
edataQ7 = log2(as.matrix(edata) + 1)
modQ7 = model.matrix(~ pdata$study)
limQ7 = lmFit(edataQ7, modQ7)
bayesQ7 = eBayes(limQ7)
head(bayesQ7)
names(bayesQ7)
head(bayesQ7$t)
topTable(bayesQ7, number = dim(edata)[1], sort.by = "none")
limmaQ7 = topTable(bayesQ7, number = dim(edata)[1], sort.by = "none")
limmaQ7 = topTable(bayesQ7, coef = 2, number = dim(edata)[1], sort.by = "none")
head(limmaQ7)
lmResult = topTable(bayesQ7, coef = 2, number = dim(edata)[1], sort.by = "none")
plotMA(deResult, lmResult)
head(deResult)
head(lmResult)
plotMA(deResult$stat, lmResult$t)
plotMA(deResult, as.numeric(lmResult))
plot(deResult$stat,lmResult$t,
xlab="DEseq statistics",ylab="Limma statistics",col=3)
abline(c(0,1),lwd=3,col="darkgrey")
cor(deResult$stat, lmResult$t)
limQ8 = p.adjust(lmResult$P.Value, method = "BH")
deQ8 = p.adjust(deResult$pvalue, method = "BH")
head(limQ8)
head(deQ8)
sum(limQ8 < 0.05)
sum(deQ8 < 0.05)
par(mfrow = c(2,1))
hist(limQ8, col = 3)
hist(deQ8, col = 2)
par(mfrow = c(1,2))
hist(limQ8, col = 3)
hist(deQ8, col = 2)
head(pdata)
## ----global_palette, results = 'asis'------------------------------------
rm(list=ls())
tropical=  c('darkorange', 'dodgerblue', 'hotpink', 'limegreen', 'yellow')
palette(tropical)
## ----global_options,warning=FALSE,message=FALSE--------------------------
## see ch. 10 Hooks of Xie's knitr book
library(knitr)
knit_hooks$set(setPch = function(before, options, envir) {
if(before) par(pch = 19)
})
opts_chunk$set(setPch = TRUE)
## ----global_plot,warning=FALSE, message=FALSE----------------------------
knitr::opts_chunk$set(fig.width=5, fig.height=5, size="footnotesize",
warning=FALSE, message=FALSE)
knitr::knit_hooks$set(small.mar = function(before, options, envir) {
if (before) graphics::par(mar = c(5,5,1.5,1))
})
## ----load_hidden, echo=FALSE, results="hide", warning=FALSE--------------
suppressPackageStartupMessages({
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
})
source("http://www.bioconductor.org/biocLite.R")
biocLite("goseq")
source("http://www.bioconductor.org/biocLite.R")
biocLite("goseq")
## ----global_palette, results = 'asis'------------------------------------
rm(list=ls())
tropical=  c('darkorange', 'dodgerblue', 'hotpink', 'limegreen', 'yellow')
palette(tropical)
## ----global_options,warning=FALSE,message=FALSE--------------------------
## see ch. 10 Hooks of Xie's knitr book
library(knitr)
knit_hooks$set(setPch = function(before, options, envir) {
if(before) par(pch = 19)
})
opts_chunk$set(setPch = TRUE)
## ----global_plot,warning=FALSE, message=FALSE----------------------------
knitr::opts_chunk$set(fig.width=5, fig.height=5, size="footnotesize",
warning=FALSE, message=FALSE)
knitr::knit_hooks$set(small.mar = function(before, options, envir) {
if (before) graphics::par(mar = c(5,5,1.5,1))
})
## ----load_hidden, echo=FALSE, results="hide", warning=FALSE--------------
suppressPackageStartupMessages({
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
})
## ----load----------------------------------------------------------------
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes()) #tells you which genome does it supprot
head(supportedGeneIDs()) #which gene ids are supported? can use your own
## ------------------------------------------------------------------------
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE) #loading a dataset from the goseq package
expr= temp_data[,-1] #genes are labeled within the dataset --> remove gene names
rownames(expr) = temp_data[,1] #rownames = gene names
expr = expr[rowMeans(expr) > 5,] #remove lowly-expressed genes
grp=factor(rep(c("Control","Treated"),times=c(4,3))) #
pdata  = data.frame(grp)
## ------------------------------------------------------------------------
de = DESeqDataSetFromMatrix(expr, pdata, ~grp) #build deseq data matrix
de_fit = DESeq(de) #identify deg
de_results = results(de_fit) #calculate the results
## ------------------------------------------------------------------------
genes = as.integer(de_results$padj < 0.05) #adjusted p-val for each gene; select p-adj < 0.05
not_na = !is.na(genes) #only keep the genes with enough data to calculate p val
names(genes) = rownames(expr) #assign row names to the same as the gene names
genes = genes[not_na] #keep the significant genes
## ------------------------------------------------------------------------
head(supportedGenomes(),n=12)[,1:4]
## ------------------------------------------------------------------------
pwf=nullp(genes,"hg19","ensGene") #calculate probability weight function
#calculate the genes using the hg19 genome with the ensembl gene name
#set up weight proporational to the size of the genes in each ontology
head(pwf)
## ------------------------------------------------------------------------
GO.wall=goseq(pwf,"hg19","ensGene")
head(GO.wall)
GO.MF=goseq(pwf,"hg19","ensGene",test.cats=c("GO:MF"))
head(GO.MF) #look at a particular category - molecular function
## ----session_info--------------------------------------------------------
devtools::session_info()
library(Biobase)
library(limma)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata_bot=pData(bot)
fdata_bot = featureData(bot)
edata = exprs(bot)
fdata_bot = fdata_bot[rowMeans(edata) > 5]
edata = edata[rowMeans(edata) > 5, ]
edata = log2(edata+1)
head(edata)
head(pdata_bot)
?lm.fit
edataQ2 = as.matrix(edata)
modQ2 = model.matrix(~ pdata_bot$strain)
lmQ2 = lmFit(edataQ1, mod)
ebayesQ2 = eBayes(lmQ2)
edataQ2 = as.matrix(edata)
modQ2 = model.matrix(~ pdata_bot$strain)
lmQ2 = lmFit(edataQ2, mod)
lmQ2 = lmFit(edataQ2, modQ2)
ebayesQ2 = eBayes(lmQ2)
lmOutQ2 = topTable(ebayesQ2, number = dim(edataQ2)[1], adjust.method = "BH", sort = "none")
names(lmOutQ2)
head(lmOutQ2)
lmAdjPQ2 = lmOutQ2$adj.P.val
sum(omAdjPQ2 < 0.05)
sum(lmAdjPQ2 < 0.05)
head(lmAdjPQ2)
lmAdjPQ2 = lmOutQ2$adj.P.Val
head(lmAdjPQ2)
sum(lmAdjPQ2 < 0.05)
sigGeneQ2 = subset(lmOutQ2, adj.P.Val < 0.05)
head(sigGeneQ2)
dim(sigGeneQ2)
supportedGenomes()
head(sigGeneQ2)
head(sigGeneQ2[,1])
genesQ3 = as.integer(sigGeneQ2$adj.P.Val)
names(genesQ3) = rownames(sigGeneQ2)
length(genesQ3)
keepGenesQ3 = !is.na(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
pwfQ3 = nullp(genesQ3, "mm9", "ensGene")
GO.wall = goseq(pwfQ3, "mm9", "ensGene")
library(goseq)
genesQ3 = as.integer(sigGeneQ2$adj.P.Val)
names(genesQ3) = rownames(edataQ2)
length(genesQ3)
keepGenesQ3 = !is.na(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
pwfQ3 = nullp(genesQ3, "mm9", "ensGene")
GO.wall = goseq(pwfQ3, "mm9", "ensGene")
head(lmOutQ2)
library(goseq)
genesQ3 = as.integer(lmOutQ2$adj.P.Val < 0.05)
keepGenesQ3 = !is.na(genesQ3)
names(genesQ3) = rownames(edataQ2)
length(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
dim(lmOutQ2)
dim(de_results)
dim(genes)
lenght(genes)
length(genes)
library(goseq)
genesQ3 = as.integer(lmOutQ2$adj.P.Val < 0.05)
keepGenesQ3 = !is.na(genesQ3)
names(genesQ3) = rownames(edataQ2)
length(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
pwfQ3 = nullp(genesQ3, "mm9", "ensGene")
head(pwfQ3)
GO.wall = goseq(pwfQ3, "mm9", "ensGene")
head(GO.wall)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata_bot=pData(bot)
fdata_bot = featureData(bot)
edata = exprs(bot)
#remove low expression gene
fdata_bot = fdata_bot[rowMeans(edata) > 5]
edata = edata[rowMeans(edata) > 5, ]
#transform data
edata = log(edata + 1)
#fit limma model
mod = model.matrix(~ pdata_bot$strain)
fit_limma = lmFit(edata, mod)
ebayes_limma = eBayes(fit_limma)
#adjust p value
limma_output = topTable(ebayes_limma, number = dim(edata)[1], adjust.method="BH", sort="none")
names(limma_output)
limma_pvals_adj = limma_output$adj.P.Val
limma_pvals_adj[1:10]
hist(limma_pvals_adj, col = 2)
#count p value less than 0.05
sum(limma_pvals_adj < 0.05)
#find the first gene showed significant differential expression
rownames(edata)[34]#the 34th
#Q3-Q4:What is the top category that comes up as over represented?What is the name of the category?--------------
#get differentiatial expressed gene list
genes = as.integer(limma_pvals_adj < 0.05)
names(genes) = rownames(edata)
not_na = !is.na(genes)
genes = genes[not_na]
head(genes)
sum(genes)
#GO cluster analysis
pwf=nullp(genes,"mm9","ensGene")
head(pwf)
GO.wall=goseq(pwf,"mm9","ensGene")
head(GO.wall)
GO.wall[1:20,]
head(genesQ3)
head(sigGeneQ2)
genesQ3 = as.integer(sigGeneQ2$adj.P.Val < 0.05)
keepGenesQ3 = !is.na(genesQ3)
names(genesQ3) = rownames(sigGeneQ2)
length(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
pwfQ3 = nullp(genesQ3, "mm9", "ensGene")
head(pwfQ3)
GO.wall = goseq(pwfQ3, "mm9", "ensGene")
head(GO.wall)
head(pdata_bot)
genesQ3 = as.integer(sigGeneQ2$adj.P.Val < 0.05)
keepGenesQ3 = !is.na(genesQ3)
names(genesQ3) = rownames(sigGeneQ2)
length(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
pwfQ3 = nullp(genesQ3, "mm9", "ensGene")
head(pwfQ3)
GoQ3 = goseq(pwfQ3, "mm9", "ensGene")
head(GoQ3)
GoQ3 = goseq(pwfQ3, "mm9", "ensGene")
GO.wall = goseq(pwfQ3, "mm9", "ensGene")
head(GO.wall)
GO.wall = goseq(pwfQ3, "mm9", "ensGene")
GO.wall=goseq(pwf,"hg19","ensGene") #find GO annotations
biocLite("org.Mm.eg.db")
library(org.Mm.eg.db) #need this for goseq analysis!!!
genesQ3 = as.integer(sigGeneQ2$adj.P.Val < 0.05)
keepGenesQ3 = !is.na(genesQ3)
names(genesQ3) = rownames(sigGeneQ2)
length(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
pwfQ3 = nullp(genesQ3, "mm9", "ensGene")
head(pwfQ3)
GoQ3 = goseq(pwfQ3, "mm9", "ensGene")
head(GoQ3)
genesQ3 = as.integer(lmOutQ2$adj.P.Val < 0.05)
keepGenesQ3 = !is.na(genesQ3)
names(genesQ3) = rownames(edataQ2)
length(genesQ3)
genesQ3 = genesQ3[keepGenesQ3]
length(genesQ3)
pwfQ3 = nullp(genesQ3, "mm9", "ensGene")
head(pwfQ3)
GO.wall = goseq(pwfQ3, "mm9", "ensGene")
head(GO.wall)
GO.wall[1:10,]
GoQ3 = goseq(pwfQ3, "mm9", "ensGene")
head(GoQ3)
GoQ3[1:10,]
genesQ5 = as.integer(lmOutQ5$adj.P.Val < 0.05)
keepGenesQ5 = !is.na(genesQ5)
names(genesQ5) = rownames(edataQ5)
length(genesQ5)
genesQ5 = genesQ5[keepGenesQ5]
length(genesQ5)
pwfQ5 = nullp(genesQ5, "mm9", "ensGene")
head(pwfQ5)
GoQ5 = goseq(pwfQ5, "mm9", "ensGene")
GoQ3[1:10,]
edataQ5 = as.matrix(edata)
modQ5 = model.matrix(~ pdata_bot$strain + pdata_bot$lane.number)
lmQ5 = lmFit(edataQ5, modQ5)
ebayesQ5 = eBayes(lmQ5)
lmOutQ5 = topTable(ebayesQ5, number = dim(edataQ5)[1], adjust.method = "BH", sort = "none")
genesQ5 = as.integer(lmOutQ5$adj.P.Val < 0.05)
keepGenesQ5 = !is.na(genesQ5)
names(genesQ5) = rownames(edataQ5)
length(genesQ5)
genesQ5 = genesQ5[keepGenesQ5]
length(genesQ5)
pwfQ5 = nullp(genesQ5, "mm9", "ensGene")
head(pwfQ5)
GoQ5 = goseq(pwfQ5, "mm9", "ensGene")
GoQ5[1:10,]
GoQ3[1:10,]
intercept(GoQ3[,1], GoQ5[,1])
intersect(GoQ3[,1], GoQ5[,1])
intersect(GoQ3[,1:10], GoQ5[,1:10])
intersect(GOTopQ3[,1], GoTopQ5[,1])
GoTopQ3 = GoQ3[1:10,]
GoTopQ5 = GoQ5[1:10,]
intersect(GOTopQ3[,1], GoTopQ5[,1])
intersect(GoTopQ3[,1], GoTopQ5[,1])
install.packages('UsingR')
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
sum(x*w)/sum(w)
mean(x)
mean(w)
mean(x)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
lm(y ~ x - 1)
data("mtcars")
head(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
0.5*(1*0.5)
1.5*0.4
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
0.5*(1/0.5)
0.5*(1/0.5)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ x)
lm(y ~ x)[1]
lm(y ~ x)[2]
lm(y ~ x)[3]
lm(y ~ x)[4]
lm(y ~ x)[5]
lm(y ~ x)$p.value
lm(y ~ x)[6]
lm(y ~ x)[7]
lm(y ~ x)[8]
lm(y ~ x)
data("mtcars")
head(mtcars)
lm(mpg ~ wt)
lm(mtacrs$mpg ~ mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt)
?mtcars
summary(lm (y ~ x))
summary(lm (y ~ x))$p.value
summary(lm (y ~ x))[1]
summary(lm (y ~ x))[2]
summary(lm (y ~ x))[3]
summary(lm (y ~ x))[4]
summary(lm (y ~ x))[4]$Pr
summary(lm (y ~ x))[4]
summary(lm (y ~ x))
lm (y ~ x)[4]
lm (y ~ x)[3]
lm (y ~ x)[5]
lm (y ~ x)[6]
lm (y ~ x)[7]
lm (y ~ x)[1]
lm (y ~ x)[2]
lm (y ~ x)$residuals
sd(lm (y ~ x)$residuals)
lm (y ~ x)$residuals
lm (y ~ x)$residuals[1]
sd(c(0.04086597, -0.02030878, -0.18806667, -0.26130455, 0.27143544,
0.16595545, 0.25413964, 0.01364175, -0.27635825))
residuals(lm(y~x))
sd(lm (y ~ x)$residuals)
sd(lm (y ~ x)$residuals)
lm(y~x)$sigma
summary(lm(y~x))
summary(lm(mtcars$mpg ~ mtcars$wt))
sd(resid(lm(y~x)))
sd(resid(lm(y ~ x)))
dim(mtcars)
sqrt(sum(resid(lm(y~x))^2)) / (n-2)
sqrt(sum(resid(lm(y~x))^2)) / (length(y)-2)
summary(lm(y~x))$sigma
sqrt(sum(resid(lm(y~x))^2) / (length(y) - 2))
fit <- lm(y ~ x)
n <- length(y)
sqrt(sum(resid(fit)^2) / (n-2))
sqrt(sum(resid(lm(y~x))^2) / (length(y) - 2))
summary(lm(mtcars$mpg ~ mtcars$wt))
1-0.7528
fit <- lm(mtcars$mpg ~ mtcars$wt)
predict(fit, newdata = 3000, interval = ('confidence'))
fit <- lm(mtcars$mpg ~ mtcars$wt)
predict(fit_car, newdata = data.frame(x = 3000), interval = ("confidence"))
predict(fit, newdata = data.frame(x = 3000), interval = ("confidence"))
fit <- lm(mtcars$mpg ~ mtcars$wt)
predict(fit, newdata = data.frame(x = 3), interval = ("prediction"))
fit_car <- lm(mtcars$mpg ~ mtcars$wt)
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
?rexp
getwd()
setwd('/Users/wamber/Google Drive/Github/blog/')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(cowplot)
lambda <- 0.2 #rate
sampleN <- 40 #number of samples
simN <- 1000 #simulations
set.seed(2) #for reproducibility purposes
meanSim1K <- replicate(1000, mean(rexp(sampleN, rate = lambda)))
1/lambda
mean(meanSim1K)
1/(lambda**2)/sampleN
1/(lambda**2)/sampleN #theoretical mean
var(meanSim1K) #variance of sample means
1/lambda #theoretical mean
mean(meanSim1K) #mean of sample means
ggplot(data = as.data.frame(meanSim1K), aes(x = meanSim1K)) +
geom_histogram(binwidth = 0.1, aes(y = ..density..), alpha = 0.3) +
geom_density(color = 'black') + #density curve of the sample distribution
geom_vline(xintercept = mean(meanSim1K), color = 'black') +
stat_function(fun = dnorm, args = list(mean = 1/lambda, sd = 1/lambda/sqrt(sampleN)), color = 'red') +
geom_vline(xintercept = 1/lambda, color = 'red') +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Histogram of 1000 simulations for mean of 40 samples')
summary(cars)
ggplot(data = as.data.frame(meanSim1K), aes(x = meanSim1K)) +
geom_histogram(binwidth = 0.1, aes(y = ..density..), alpha = 0.3) +
geom_density(color = 'red') + #density curve of the sample distribution
geom_vline(xintercept = mean(meanSim1K), color = 'red') +
stat_function(fun = dnorm, args = list(mean = 1/lambda, sd = 1/lambda/sqrt(sampleN)), color = 'black') +
geom_vline(xintercept = 1/lambda, color = 'black') +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Histogram of 1000 simulations for mean of 40 samples')
ggplot(data = as.data.frame(meanSim1K), aes(x = meanSim1K)) +
geom_histogram(binwidth = 0.1, aes(y = ..density..), alpha = 0.3) +
geom_density(color = 'red') + #density curve of the sample distribution
geom_vline(xintercept = mean(meanSim1K), color = 'red') +
stat_function(fun = dnorm, args = list(mean = 1/lambda, sd = 1/lambda/sqrt(sampleN)), color = 'black') +
geom_vline(xintercept = 1/lambda, color = 'black') +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Distribution of 1000 sample means ')
servr::jekyll()
servr::jekyll()
